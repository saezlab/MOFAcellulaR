[{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"multicellular-factor-analysis","dir":"Articles","previous_headings":"","what":"Multicellular factor analysis","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"repurposed statistical framework multi-omics factor analysis (MOFA) MOFA+ analyze cross-condition single cell atlases. atlases profile molecular readouts (eg. gene expression) individual cells per sample can classified groups based lineage (cell types) functions (cell states). assumed nested design represented multi-view dataset collection patients, individual view contains summarized information features cell type per patient (eg. pseudobulk). data representation can many views cell types original atlas. MOFA used estimate latent space captures variability patients across distinct cell types. estimated factors composing latent space can interpreted multicellular program captures coordinated expression patterns distinct cell types. cell type specific gene expression patterns can retrieved factor loadings, gene cell type contain weight contributes factor score. Similarly, application MOFA multiomics data, factors can used unsupervised analysis samples can associated biological technical covariates original samples. Additionally, reconstruction errors per view factor can used prioritize cell types associated covariates interest.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"show use MOFA multicellular factor analysis applying cross-condition atlas. example, use toy dataset containing pseudobulk gene expression information 22 samples across 3 cell types","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\")) testcoldata %>%   dplyr::select(donor_id) %>%   dplyr::group_by(donor_id) %>%   dplyr::summarise(n()) %>%   head() #> # A tibble: 6 × 2 #>   donor_id      `n()` #>   <chr>         <int> #> 1 GT/IZ_P13         3 #> 2 GT/IZ_P15         3 #> 3 GT/IZ_P9          3 #> 4 GT/IZ_P9_rep2     3 #> 5 IZ/BZ_P2          3 #> 6 IZ_P10            3 testcoldata %>%   dplyr::select(cell_type) %>%   dplyr::group_by(cell_type) %>%   dplyr::summarise(n()) %>%   head() #> # A tibble: 3 × 2 #>   cell_type `n()` #>   <chr>     <int> #> 1 CM           22 #> 2 Endo         22 #> 3 Fib          22"},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"processing-pseudobulk-expression-profiles","dir":"Articles","previous_headings":"","what":"1. Processing pseudobulk expression profiles","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"assume regardless preferred way storing pseudobulk data, count matrix (genes rows, samples columns) accompanied annotations columns contain information cell type sample origin pseudobulk expression vector. starting single cell data set, recommend use functions like scuttle::summarizeAssayByGroup() generate objects ones used vignette. example data testpbcounts contains expression matrix. testcoldata contains information sample (column) testpbcounts named data.frame. necessary components testcoldata donor_id column refers sample interest (eg. patient), cell_type define views multicellular factor analysis, cell_counts allow perform quality control filtering. MOFAcellulaR provides series useful tools go two data objects MOFA ready dataframe used performed group factor analysis. First, create initial SummarizedExperiment object allow make processing. , create list SummarizedExperiment samples cell-types interest. initial quality control step filter pseudobulk samples coming low number cells, assumption gene count estimates coming small population cells may unreliable. actual number cells needed pseudobulk profile arbitrary empirical decision analyzer. sample filtering required, possible also define helping functions. example work cardiomyocytes (CM) fibroblasts (Fib) next step, requires identify lowly expressed genes highly variable genes per cell-type independently. reuse criteria edgeR identify lowly expressed genes. Similarly number cells, parameters decided analyst. Since override group parameter, samples assumed group. Normalization pseudobulk expression profiles using Trimmed Mean M-values (TMM) edgeR::calcNormFactors performed Identification highly variable genes per cell type performed scran::getTopHVGs(), however can also provide list highly variable genes preferred Finally, possible veto genes part model specific cell-types. way deal create dictionary exclusive genes given cell-type. example marker genes. vignette, explicitly make TTN gene exclusive cardiomyocytes, POSTN exclusive fibroblasts based prior knowledge, avoiding background genes cell types. convert cell-type list MOFA ready object just run following line previous steps can concatenated using %>% convenience","code":"testpbcounts[1:5,1:5] #>            CM_control_P1 Endo_control_P1 Fib_control_P1 CM_control_P17 #> AL627309.1             0               0              0              0 #> AL627309.5             0               0              0              0 #> AL627309.4             0               0              0              0 #> AL669831.2             0               0              0              0 #> LINC01409              1               1              1              1 #>            Endo_control_P17 #> AL627309.1                0 #> AL627309.5                0 #> AL627309.4                0 #> AL669831.2                0 #> LINC01409                 0 testcoldata %>%   head() #>                     donor_id cell_type cell_counts #> CM_control_P1     control_P1        CM          10 #> Endo_control_P1   control_P1      Endo          10 #> Fib_control_P1    control_P1       Fib          10 #> CM_control_P17   control_P17        CM          10 #> Endo_control_P17 control_P17      Endo          10 #> Fib_control_P17  control_P17       Fib          10 pb_obj <- MOFAcellulaR::create_init_exp(counts = testpbcounts,  coldata = testcoldata) ct_list <- MOFAcellulaR::filt_profiles(pb_dat = pb_obj,                           cts = c(\"Fib\",\"CM\"),                           ncells = 0,                           counts_col = \"cell_counts\", # This refers to the column name in testcoldata where the number of cells per profile was stored                           ct_col = \"cell_type\") # This refers to the column name in testcoldata where the cell-type label was stored ct_list <- MOFAcellulaR::filt_gex_byexpr(pb_dat_list = ct_list,                             min.count = 5, # Modify!!                             min.prop = 0.25) # Modify!! #> Warning in filterByExpr.DGEList(y, design = design, group = group, lib.size = #> lib.size, : All samples appear to belong to the same group.  #> Warning in filterByExpr.DGEList(y, design = design, group = group, lib.size = #> lib.size, : All samples appear to belong to the same group. ct_list <- MOFAcellulaR::tmm_trns(pb_dat_list = ct_list,                                   scale_factor = 1000000) ct_list <- MOFAcellulaR::filt_gex_byhvg(pb_dat_list = ct_list,                                         prior_hvg = NULL,                                         var.threshold = 0) prior_hvg_test <- list(\"CM\" = c(\"TTN\"),                         \"Fib\" = c(\"POSTN\"))  ct_list <- MOFAcellulaR::filt_gex_bybckgrnd(pb_dat_list = ct_list,                                             prior_mrks = prior_hvg_test) multiview_dat <- pb_dat2MOFA(pb_dat_list = ct_list) multiview_dat <- MOFAcellulaR::create_init_exp(counts = testpbcounts,                                                  coldata = testcoldata) %>%   MOFAcellulaR::filt_profiles(pb_dat = .,                           cts = c(\"Fib\",\"CM\", \"Endo\"),                           ncells = 0,                           counts_col = \"cell_counts\", # This refers to the column name in testcoldata where the number of cells per profile was stored                           ct_col = \"cell_type\") %>%   MOFAcellulaR::filt_gex_byexpr(pb_dat_list = .,                                 min.count = 5,                                 min.prop = 0.25) %>%   MOFAcellulaR::tmm_trns(pb_dat_list = .,                          scale_factor = 1000000) %>%   MOFAcellulaR::filt_gex_byhvg(pb_dat_list = .,                                prior_hvg = NULL,                                var.threshold = 0) %>%   MOFAcellulaR::filt_gex_bybckgrnd(pb_dat_list = .,                                             prior_mrks = prior_hvg_test) %>%   MOFAcellulaR::pb_dat2MOFA(pb_dat_list = .)"},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"fitting-a-mofa-model","dir":"Articles","previous_headings":"","what":"2. Fitting a MOFA model","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"single cell data transformed multi-view representation, now can use MOFA run multicellular factor analysis. try identify 6 factors explain variability patients captured seven different cell-types. MOFA self-regularizes indicate potential optimal number factors useful describe variability data, advise follow indications MOFA Every factor captures coordination gene expression across cell types called multicellular gene factors rest vignette. important clarify factors capture: Coordinated expression identical genes (generalistic response) across cell-types Coordinated expression different genes (cell-type specific response) across cell-types Fitting model take seconds.","code":"MOFAobject <- MOFA2::create_mofa(multiview_dat)  data_opts <- MOFA2::get_default_data_options(MOFAobject) train_opts <- MOFA2::get_default_training_options(MOFAobject) model_opts <- MOFA2::get_default_model_options(MOFAobject)  # This avoids the regularization of multicellular programs per cell type. # This avoids less sparse gene weights model_opts$spikeslab_weights <- FALSE   # Define the number of factors needed model_opts$num_factors <- 5  # Prepare MOFA model: MOFAobject <- MOFA2::prepare_mofa(object = MOFAobject,                            data_options = data_opts,                            model_options = model_opts,                            training_options = train_opts)    outfile <- file.path(\"./vignettemodel.hdf5\")  model <- MOFA2::run_mofa(MOFAobject, outfile) #> Warning in .quality_control(object, verbose = verbose): Factor(s) 1 are strongly correlated with the total number of expressed features for at least one of your omics. Such factors appear when there are differences in the total 'levels' between your samples, *sometimes* because of poor normalisation in the preprocessing steps."},{"path":[]},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"exporting-model-outputs","dir":"Articles","previous_headings":"3. Exploring the MOFA model","what":"Exporting model outputs","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"convenience, provide functions explore results model complementary ones already provided MOFA documentation. functions based idea users extra information regarding samples analyzed. provide supplemental annotations toy object. sample meta data can also contain continous measurements needed, example clinical variable fake_var can obtain factor scores samples calling next function can specify also factor interested perform type statistical analysis interest factor composed linear combination genes per cell-type, possible extract weights factor practical function gene loadings essential want map cell-type specific processes bulk spatial transcriptomics, since can treated gene sets. interested , refer decoupleR decoupler-py explain detail perform enrichment analysis type weighted gene sets. Alternatively, gene loadings can reduced functional cellular processes enriching gene sets provided literature cell-type specific signature. Treat gene loading matrix scaled transcriptomics perform enrichment test preference, see decoupleR’s documentation .","code":"metadata <- readRDS(file.path(inputs_dir, \"testmetadata.rds\")) head(metadata) #>         sample patient_group batch #> 1   control_P1      myogenic     A #> 31    RZ/FZ_P5      myogenic     A #> 61    RZ/BZ_P3      myogenic     A #> 91       IZ_P3      ischemic     A #> 121   RZ/BZ_P2      myogenic     A #> 151      RZ_P3      myogenic     A set.seed(145) metadata$fake_var <- stats::rnorm(nrow(metadata)) all_factors <- MOFAcellulaR::get_tidy_factors(model = model,                                  metadata = metadata,                                  factor = \"all\",                                  sample_id_column = \"sample\")  head(all_factors) #> # A tibble: 6 × 6 #>   sample      patient_group batch fake_var Factor   value #>   <chr>       <fct>         <chr>    <dbl> <chr>    <dbl> #> 1 control_P1  myogenic      A        0.687 Factor1 -1.17  #> 2 control_P1  myogenic      A        0.687 Factor2 -0.519 #> 3 control_P1  myogenic      A        0.687 Factor3 -0.331 #> 4 control_P1  myogenic      A        0.687 Factor4 -0.612 #> 5 control_P1  myogenic      A        0.687 Factor5  0.465 #> 6 control_P17 myogenic      B       -1.29  Factor1 -1.33 Factor3 <- MOFAcellulaR::get_tidy_factors(model = model,                              metadata = metadata,                              factor = \"Factor3\",                              sample_id_column = \"sample\")  head(Factor3) #> # A tibble: 6 × 6 #>   sample      patient_group batch fake_var Factor   value #>   <chr>       <fct>         <chr>    <dbl> <chr>    <dbl> #> 1 control_P1  myogenic      A        0.687 Factor3 -0.331 #> 2 control_P17 myogenic      B       -1.29  Factor3 -0.367 #> 3 control_P7  myogenic      B        1.17  Factor3 -0.151 #> 4 control_P8  myogenic      B        0.793 Factor3 -0.206 #> 5 GT/IZ_P13   ischemic      B       -0.354 Factor3  0.972 #> 6 GT/IZ_P15   ischemic      B       -1.02  Factor3  0.363 gene_weights <- MOFAcellulaR::get_geneweights(model = model, factor = \"Factor1\") head(gene_weights) #>      feature       value ctype #> 1     TTTY14 -0.07195983    CM #> 2    TTN-AS1 -0.69494200    CM #> 3 SLC8A1-AS1 -0.31866250    CM #> 4     LRRTM3 -0.63194725    CM #> 5   MLIP-AS1 -0.54372348    CM #> 6  LINC02208 -0.82502754    CM"},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"visualizing-sample-variability","dir":"Articles","previous_headings":"3. Exploring the MOFA model","what":"Visualizing sample variability","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"initial exploratory analysis, one may want visualize samples 2D space, provide plotting function allows perform using UMAPs multidimensional-scaling plots.","code":"UMAP_embedding <- MOFAcellulaR::plot_sample_2D(model = model,                                                method = \"UMAP\",                                                metadata = metadata,                                                sample_id_column = \"sample\",                                                color_by = \"patient_group\")"},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"performing-statistical-analyses","dir":"Articles","previous_headings":"3. Exploring the MOFA model","what":"Performing statistical analyses","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"facilitate exploration model, provide wrapper performs association tests factor scores covariates samples, covariates can continuous categorical. case continuous variables linear model fitted. categorical variables, analysis variance (ANOVA) performed.","code":"categorical_assoc <- MOFAcellulaR::get_associations(model = model,                                       metadata = metadata,                                        sample_id_column = \"sample\",                                        test_variable = \"patient_group\",                                        test_type = \"categorical\",                                        group = FALSE)  categorical_assoc #> # A tibble: 5 × 4 #>   Factor  term          p.value adj_pvalue #>   <chr>   <chr>           <dbl>      <dbl> #> 1 Factor1 patient_group 0.00960     0.0480 #> 2 Factor2 patient_group 0.0720      0.216  #> 3 Factor3 patient_group 0.315       0.547  #> 4 Factor4 patient_group 0.0379      0.152  #> 5 Factor5 patient_group 0.274       0.547 continuous_assoc <- MOFAcellulaR::get_associations(model = model,                                        metadata = metadata,                                        sample_id_column = \"sample\",                                        test_variable = \"fake_var\",                                        test_type = \"continuous\",                                        group = FALSE)  continuous_assoc #> # A tibble: 5 × 4 #>   Factor  term     p.value adj_pvalue #>   <chr>   <chr>      <dbl>      <dbl> #> 1 Factor1 fake_var  0.0189     0.0945 #> 2 Factor2 fake_var  0.455      1      #> 3 Factor3 fake_var  0.254      1      #> 4 Factor4 fake_var  0.561      1      #> 5 Factor5 fake_var  0.825      1"},{"path":"https://saezlab.github.io/MOFAcellulaR/articles/get-started.html","id":"visualizing-the-complete-model","dir":"Articles","previous_headings":"3. Exploring the MOFA model","what":"Visualizing the complete model","title":"Running a multicellular factor analysis in a cross-condition single-cell atlas","text":"MOFA able interpret model distinct ways: First reduces variability samples across cell-types inferring latent space. See MOFAcellulaR::get_tidy_factors latent space captures certain percentage variability original data, case variability samples within single cell-type. full exploration model can done using: latent variable contributes explaining variability original data can also used prioritize signals. example, model, previously identified Factor1 associated patient grouping, based explaned variance, can say represents multicellular program three cell-types analyzed, Factor1 mainly captures variability samples within CMs. latent variable represents multicellular program can explored detail MOFAcellulaR::get_geneweights visualize distinct components model, provide heatmap plotting function collects distinct levels results model","code":"model@cache$variance_explained$r2_total #> $single_group #>       CM     Endo      Fib  #> 76.75793 67.30179 61.72416 model@cache$variance_explained$r2_per_factor$single_group[,,drop = F] #>                CM       Endo       Fib #> Factor1 42.440678 36.1886863 27.636917 #> Factor2 16.687453 20.8902217 20.198155 #> Factor3  9.965168  8.5866332  9.443090 #> Factor4  5.140941  0.8256951  2.962209 #> Factor5  2.498294  1.1868970  1.576150 assoc_list = list(\"categorical\" = categorical_assoc, \"continuous\" = continuous_assoc)  plot_MOFA_hmap(model = model,                 group = FALSE,                 metadata = metadata,                 sample_id_column = \"sample\",                 sample_anns = c(\"patient_group\", \"batch\", \"fake_var\"),                 assoc_list = assoc_list) utils::sessionInfo() #> R version 4.2.3 (2023-03-15) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] grid      stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] dplyr_1.1.0                 MOFAcellulaR_0.0.0.9000     #>  [3] ggplot2_3.4.1               uwot_0.1.14                 #>  [5] Matrix_1.5-3                circlize_0.4.15             #>  [7] ComplexHeatmap_2.14.0       MOFA2_1.8.0                 #>  [9] SummarizedExperiment_1.28.0 Biobase_2.58.0              #> [11] GenomicRanges_1.50.2        GenomeInfoDb_1.34.9         #> [13] IRanges_2.32.0              S4Vectors_0.36.2            #> [15] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [17] matrixStats_0.63.0          #>  #> loaded via a namespace (and not attached): #>   [1] Rtsne_0.16                  colorspace_2.1-0            #>   [3] rjson_0.2.21                rprojroot_2.0.3             #>   [5] scuttle_1.8.4               bluster_1.8.0               #>   [7] XVector_0.38.0              BiocNeighbors_1.16.0        #>   [9] GlobalOptions_0.1.2         fs_1.6.1                    #>  [11] clue_0.3-64                 farver_2.1.1                #>  [13] ggrepel_0.9.3               fansi_1.0.4                 #>  [15] codetools_0.2-19            sparseMatrixStats_1.10.0    #>  [17] doParallel_1.0.17           cachem_1.0.7                #>  [19] knitr_1.42                  jsonlite_1.8.4              #>  [21] broom_1.0.4                 cluster_2.1.4               #>  [23] png_0.1-8                   pheatmap_1.0.12             #>  [25] HDF5Array_1.26.0            compiler_4.2.3              #>  [27] dqrng_0.3.0                 basilisk_1.10.2             #>  [29] backports_1.4.1             fastmap_1.1.1               #>  [31] limma_3.54.2                cli_3.6.0                   #>  [33] BiocSingular_1.14.0         htmltools_0.5.4             #>  [35] tools_4.2.3                 igraph_1.4.1                #>  [37] rsvd_1.0.5                  gtable_0.3.1                #>  [39] glue_1.6.2                  GenomeInfoDbData_1.2.9      #>  [41] reshape2_1.4.4              Rcpp_1.0.10                 #>  [43] jquerylib_0.1.4             pkgdown_2.0.7               #>  [45] vctrs_0.5.2                 rhdf5filters_1.10.0         #>  [47] iterators_1.0.14            DelayedMatrixStats_1.20.0   #>  [49] xfun_0.37                   stringr_1.5.0               #>  [51] beachmat_2.14.0             lifecycle_1.0.3             #>  [53] irlba_2.3.5.1               statmod_1.5.0               #>  [55] edgeR_3.40.2                zlibbioc_1.44.0             #>  [57] scales_1.2.1                basilisk.utils_1.10.0       #>  [59] ragg_1.2.5                  parallel_4.2.3              #>  [61] rhdf5_2.42.0                RColorBrewer_1.1-3          #>  [63] SingleCellExperiment_1.20.0 yaml_2.3.7                  #>  [65] memoise_2.0.1               reticulate_1.28             #>  [67] sass_0.4.5                  stringi_1.7.12              #>  [69] highr_0.10                  desc_1.4.2                  #>  [71] corrplot_0.92               foreach_1.5.2               #>  [73] ScaledMatrix_1.6.0          scran_1.26.2                #>  [75] filelock_1.0.2              BiocParallel_1.32.5         #>  [77] shape_1.4.6                 rlang_1.1.0                 #>  [79] pkgconfig_2.0.3             systemfonts_1.0.4           #>  [81] bitops_1.0-7                evaluate_0.20               #>  [83] lattice_0.20-45             purrr_1.0.1                 #>  [85] Rhdf5lib_1.20.0             labeling_0.4.2              #>  [87] cowplot_1.1.1               tidyselect_1.2.0            #>  [89] plyr_1.8.8                  magrittr_2.0.3              #>  [91] R6_2.5.1                    generics_0.1.3              #>  [93] metapod_1.6.0               DelayedArray_0.24.0         #>  [95] pillar_1.8.1                withr_2.5.0                 #>  [97] RCurl_1.98-1.10             tibble_3.2.0                #>  [99] dir.expiry_1.6.0            crayon_1.5.2                #> [101] utf8_1.2.3                  rmarkdown_2.20              #> [103] GetoptLong_1.0.5            locfit_1.5-9.7              #> [105] FNN_1.1.3.1                 forcats_1.0.0               #> [107] digest_0.6.31               tidyr_1.3.0                 #> [109] textshaping_0.3.6           munsell_0.5.0               #> [111] bslib_0.4.2"},{"path":"https://saezlab.github.io/MOFAcellulaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ricardo O. Ramirez Flores. Author, maintainer.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ramirez Flores R (2023). MOFAcellulaR: Multicellular Factor Analysis Using MOFA. R package version 0.0.0.9000, https://saezlab.github.io/MOFAcellulaR/.","code":"@Manual{,   title = {MOFAcellulaR: Multicellular Factor Analysis Using MOFA},   author = {Ricardo O. {Ramirez Flores}},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://saezlab.github.io/MOFAcellulaR/}, }"},{"path":"https://saezlab.github.io/MOFAcellulaR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Multicellular Factor Analysis Using MOFA","text":"Cross-condition single-cell atlases essential characterization human disease. complex experimental designs, patient samples profiled across distinct cell types clinical conditions describe disease processes cellular level. However, current analysis tools limited pairwise cross-condition comparisons, disregarding multicellular nature disease processes effects biological technical factors variation gene expression. propose computational framework unsupervised analysis samples cross-condition single cell atlases identification multicellular programs associated disease. framework based probabilistic factor analysis implemented MOFA MOFA+ incorporates variation patient samples across cell types allows joint analysis independent patient cohorts facilitating study integration. MOFAcellulaR package facilitates implementation MOFA models single cell data","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multicellular Factor Analysis Using MOFA","text":"can install latest stable development versions GitHub remotes: stable","code":"# install.packages(\"remotes\") remotes::install_github(\"saezlab/MOFAcellulaR\")"},{"path":"https://saezlab.github.io/MOFAcellulaR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Multicellular Factor Analysis Using MOFA","text":"Start reading vignette(\"MOFAcellulaR\") learn use helping functions MOFAcellulaR run MOFA models.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Multicellular Factor Analysis Using MOFA","text":"use MOFAcellulaR research please cite following publication: Ramirez-Flores RO, Lanzer JD, Dimitrov D, Velten B, Saez-Rodriguez J. “Multicellular factor analysis tissue-centric understanding disease” BioRxiv. 2023. DOI: 10.1101/2023.02.23.529642 Also, don’t forget cite MOFA’s original publications Argelaguet R, Arnol D, Bredikhin D, Deloro Y, Velten B, Marioni JC & Stegle O (2020) MOFA+: statistical framework comprehensive integration multi-modal single-cell data. Genome Biol 21: 111 Argelaguet R, Velten B, Arnol D, Dietrich S, Zenz T, Marioni JC, Buettner F, Huber W & Stegle O (2018) Multi-Omics Factor Analysis-framework unsupervised integration multi-omics data sets. Mol Syst Biol 14: e8124","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/create_init_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Single-cell SummarizedExperiment object — create_init_exp","title":"Single-cell SummarizedExperiment object — create_init_exp","text":"Creates SummarizedExperiment object necessary build multi-view representation.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/create_init_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Single-cell SummarizedExperiment object — create_init_exp","text":"","code":"create_init_exp(counts, coldata)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/create_init_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Single-cell SummarizedExperiment object — create_init_exp","text":"counts Named numeric matrix features rows samples columns. coldata data frame containing annotations samples.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/create_init_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Single-cell SummarizedExperiment object — create_init_exp","text":"SummarizedExperiment provided data","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/create_init_exp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single-cell SummarizedExperiment object — create_init_exp","text":"function first step multicellular factor analysis. collects single object pseudobulk counts single cell experiment annotations.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/create_init_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Single-cell SummarizedExperiment object — create_init_exp","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\")) pb_obj <- create_init_exp(counts = testpbcounts,  coldata = testcoldata)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_bybckgrnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter background expression of marker genes — filt_gex_bybckgrnd","title":"Filter background expression of marker genes — filt_gex_bybckgrnd","text":"collection matrices, exclude features considered background based prior knowledge marker genes","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_bybckgrnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter background expression of marker genes — filt_gex_bybckgrnd","text":"","code":"filt_gex_bybckgrnd(pb_dat_list, prior_mrks)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_bybckgrnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter background expression of marker genes — filt_gex_bybckgrnd","text":"pb_dat_list List SummarizedExperiment generated MOFAcellulaR::filt_profiles() prior_mrks named list providing marker genes per cell type. Names identical pb_dat_list","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_bybckgrnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter background expression of marker genes — filt_gex_bybckgrnd","text":"named list SummarizedExperiments per cell type provided filtered normalized log transformed data logcounts assay","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_bybckgrnd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter background expression of marker genes — filt_gex_bybckgrnd","text":"Performs filtering highly variable genes (data transformation). based marker genes. assumption background gene expression can traced expression cell type marker genes cell types express gene. Marker genes kept matrix expressed expected cell type","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_bybckgrnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter background expression of marker genes — filt_gex_bybckgrnd","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\"))  pb_obj <- create_init_exp(counts = testpbcounts,                           coldata = testcoldata)  ct_list <- filt_profiles(pb_dat = pb_obj,                          cts = c(\"Fib\",\"CM\"),                          ncells = 5,                          counts_col = \"cell_counts\",                          ct_col = \"cell_type\")  ct_list <- filt_gex_byexpr(pb_dat_list = ct_list,                            min.count = 5,                            min.prop = 0.25) #> Warning: All samples appear to belong to the same group. #> Warning: All samples appear to belong to the same group.  ct_list <- tmm_trns(pb_dat_list = ct_list,                     scale_factor = 1000000)  ct_list <- filt_gex_byhvg(pb_dat_list = ct_list,                           prior_hvg = NULL,                           var.threshold = 0)  prior_hvg_test <- list(\"CM\" = c(\"TTN\"),                        \"Fib\" = c(\"POSTN\"))  ct_list <- filt_gex_bybckgrnd(pb_dat_list = ct_list,                               prior_mrks = prior_hvg_test)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byexpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter lowly expressed genes from pseudobulk profiles — filt_gex_byexpr","title":"Filter lowly expressed genes from pseudobulk profiles — filt_gex_byexpr","text":"Filter lowly expressed genes pseudobulk profiles using edgeR.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byexpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter lowly expressed genes from pseudobulk profiles — filt_gex_byexpr","text":"","code":"filt_gex_byexpr(pb_dat_list, min.count, min.prop)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byexpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter lowly expressed genes from pseudobulk profiles — filt_gex_byexpr","text":"pb_dat_list List SummarizedExperiment generated MOFAcellulaR::filt_profiles() min.count Numeric, minimum counts per sample considered. Check ?edgeR::filterByExpr() details. min.prop Numeric, minimum proportion samples containing minimum counts. Check ?edgeR::filterByExpr() details.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byexpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter lowly expressed genes from pseudobulk profiles — filt_gex_byexpr","text":"named list SummarizedExperiments per cell type provided filtered pseudobulk profiles","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byexpr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter lowly expressed genes from pseudobulk profiles — filt_gex_byexpr","text":"function wraps edgeR::filterByExpr() applied lists SummarizedExperiments.assumes samples part group.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byexpr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter lowly expressed genes from pseudobulk profiles — filt_gex_byexpr","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\"))  pb_obj <- create_init_exp(counts = testpbcounts,                           coldata = testcoldata)  ct_list <- filt_profiles(pb_dat = pb_obj,                          cts = c(\"Fib\",\"CM\"),                          ncells = 5,                          counts_col = \"cell_counts\",                          ct_col = \"cell_type\")  ct_list <- filt_gex_byexpr(pb_dat_list = ct_list,                            min.count = 5,                            min.prop = 0.25) #> Warning: All samples appear to belong to the same group. #> Warning: All samples appear to belong to the same group."},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byhvg.html","id":null,"dir":"Reference","previous_headings":"","what":"Indentify highly variable genes — filt_gex_byhvg","title":"Indentify highly variable genes — filt_gex_byhvg","text":"Identifies highly variable features log-normalized count matrix filters matrices list genes provided user.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byhvg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indentify highly variable genes — filt_gex_byhvg","text":"","code":"filt_gex_byhvg(pb_dat_list, prior_hvg = NULL, var.threshold = 1)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byhvg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indentify highly variable genes — filt_gex_byhvg","text":"pb_dat_list List SummarizedExperiment generated MOFAcellulaR::filt_profiles() prior_hvg NULL default. Alternatively, named list character vector containing features select. var.threshold Numeric. Inherited scran::getTopHVGs(). Minimum threshold metric variation","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byhvg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indentify highly variable genes — filt_gex_byhvg","text":"named list SummarizedExperiments per cell type provided filtered normalized log transformed data logcounts assay","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byhvg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indentify highly variable genes — filt_gex_byhvg","text":"function estimates highly variable genes per cell type using scran::getTopHVGs. Alternatively, function allows user provide features used cell type. prior genes used, cell types information missing, highly variable genes calculated","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_gex_byhvg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indentify highly variable genes — filt_gex_byhvg","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\"))  pb_obj <- create_init_exp(counts = testpbcounts,                           coldata = testcoldata)  ct_list <- filt_profiles(pb_dat = pb_obj,                          cts = c(\"Fib\",\"CM\"),                          ncells = 5,                          counts_col = \"cell_counts\",                          ct_col = \"cell_type\")  ct_list <- filt_gex_byexpr(pb_dat_list = ct_list,                            min.count = 5,                            min.prop = 0.25) #> Warning: All samples appear to belong to the same group. #> Warning: All samples appear to belong to the same group.  ct_list <- tmm_trns(pb_dat_list = ct_list,                     scale_factor = 1000000)  ct_list <- filt_gex_byhvg(pb_dat_list = ct_list,                           prior_hvg = NULL,                           var.threshold = 0)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter pseudobulk profiles — filt_profiles","title":"Filter pseudobulk profiles — filt_profiles","text":"Filter pseudobulk profiles specific cell types based number cells generated.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter pseudobulk profiles — filt_profiles","text":"","code":"filt_profiles(   pb_dat,   cts,   ncells = 50,   counts_col = \"cell_counts\",   ct_col = \"cell_type\" )"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter pseudobulk profiles — filt_profiles","text":"pb_dat SummarizedExperiment generated MOFAcellulaR::create_init_exp() cts vector containing names cells used analysis ncells Number minimum cells pseudobulk profile counts_col String pointing column colData(pb_dat) number cells per pseudobulk stored ct_col String pointing column colData(pb_dat) cell-type category per pseudobulk stored","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter pseudobulk profiles — filt_profiles","text":"named list SummarizedExperiments per cell type provided filtered pseudobulk profiles","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_profiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter pseudobulk profiles — filt_profiles","text":"function assumes SummarizedExperiment object information colData(object) specifying number cells used profile cell-type grouping profiles. function select cell-types provided user filter profiles less cells ones specified.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/filt_profiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter pseudobulk profiles — filt_profiles","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\"))  pb_obj <- create_init_exp(counts = testpbcounts,                           coldata = testcoldata)  ct_list <- filt_profiles(pb_dat = pb_obj,                          cts = c(\"Fib\",\"CM\"),                          ncells = 5,                          counts_col = \"cell_counts\",                          ct_col = \"cell_type\")"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_associations.html","id":null,"dir":"Reference","previous_headings":"","what":"Associate factors to covariates of interest — get_associations","title":"Associate factors to covariates of interest — get_associations","text":"Performs Analysis Variance (ANOVA) linear models associate factor scores covariates interest provided user","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_associations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Associate factors to covariates of interest — get_associations","text":"","code":"get_associations(   model,   metadata,   sample_id_column,   test_variable,   test_type = \"categorical\",   group = FALSE )"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_associations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Associate factors to covariates of interest — get_associations","text":"model MOFA2 model. metadata data frame containing annotations samples included MOFA model. sample_id_column string character refers column metadata sample identifier located. test_variable string character refers column metadata covariate tested located. test_type string character (\"categorical\", \"continuous\") group Boolean flag TRUE/FALSE, specify grouped MOFA model provided.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_associations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Associate factors to covariates of interest — get_associations","text":"dataframe tidy format containing p-values association tests per factor","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_associations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Associate factors to covariates of interest — get_associations","text":"Given covariate interest defined test, function tests associations factor scores. categorical tests, ANOVAs fitted, continous variables, linear models. P-values corrected using Benjamini-Hochberg procedure.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_associations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Associate factors to covariates of interest — get_associations","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") model <- MOFA2::load_model(file.path(inputs_dir, \"testmodel.hdf5\")) #> Warning: Factor(s) 1 are strongly correlated with the total number of expressed features for at least one of your omics. Such factors appear when there are differences in the total 'levels' between your samples, *sometimes* because of poor normalisation in the preprocessing steps. metadata <- readRDS(file.path(inputs_dir, \"testmetadata.rds\")) metadata$var <- stats::rnorm(nrow(metadata))  categorical_assoc <- get_associations(model = model,                                       metadata = metadata,                                       sample_id_column = \"sample\",                                       test_variable = \"patient_group\",                                       test_type = \"categorical\",                                       group = FALSE)  continuous_assoc <- get_associations(model = model,                                       metadata = metadata,                                       sample_id_column = \"sample\",                                       test_variable = \"var\",                                       test_type = \"continuous\",                                       group = FALSE)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_geneweights.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract feature weights scores from a model in a tidy format for a factor of interest — get_geneweights","title":"Extract feature weights scores from a model in a tidy format for a factor of interest — get_geneweights","text":"Generates tidy dataframe feature weights factors interest useful plotting function enrichment analysis","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_geneweights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract feature weights scores from a model in a tidy format for a factor of interest — get_geneweights","text":"","code":"get_geneweights(model, factor)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_geneweights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract feature weights scores from a model in a tidy format for a factor of interest — get_geneweights","text":"model MOFA2 model. factor string character define factor extracted.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_geneweights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract feature weights scores from a model in a tidy format for a factor of interest — get_geneweights","text":"dataframe tidy format containing factor feature weights","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_geneweights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract feature weights scores from a model in a tidy format for a factor of interest — get_geneweights","text":"function simplifies extraction factor feature weights MOFA models.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_geneweights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract feature weights scores from a model in a tidy format for a factor of interest — get_geneweights","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") model <- MOFA2::load_model(file.path(inputs_dir, \"testmodel.hdf5\")) #> Warning: Factor(s) 1 are strongly correlated with the total number of expressed features for at least one of your omics. Such factors appear when there are differences in the total 'levels' between your samples, *sometimes* because of poor normalisation in the preprocessing steps. gene_weights <- get_geneweights(model = model,                                 factor = \"Factor1\")"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_tidy_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract factor scores from a model in a tidy format with meta data — get_tidy_factors","title":"Extract factor scores from a model in a tidy format with meta data — get_tidy_factors","text":"Generates tidy dataframe factors interest useful plotting functions.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_tidy_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract factor scores from a model in a tidy format with meta data — get_tidy_factors","text":"","code":"get_tidy_factors(   model,   metadata,   factor,   group = FALSE,   sample_id_column = \"sample\" )"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_tidy_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract factor scores from a model in a tidy format with meta data — get_tidy_factors","text":"model MOFA2 model. metadata data frame containing annotations samples included MOFA model. factor string character define factor extracted. Alternatively, \"\" get factors. group Boolean flag TRUE/FALSE, specify grouped MOFA model provided. sample_id_column string character refers column metadata sample identifier located.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_tidy_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract factor scores from a model in a tidy format with meta data — get_tidy_factors","text":"dataframe tidy format containing factor scores per sample together metadata","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_tidy_factors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract factor scores from a model in a tidy format with meta data — get_tidy_factors","text":"function simplifies extraction factor scores MOFA models.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/get_tidy_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract factor scores from a model in a tidy format with meta data — get_tidy_factors","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") model <- MOFA2::load_model(file.path(inputs_dir, \"testmodel.hdf5\")) #> Warning: Factor(s) 1 are strongly correlated with the total number of expressed features for at least one of your omics. Such factors appear when there are differences in the total 'levels' between your samples, *sometimes* because of poor normalisation in the preprocessing steps. metadata <- readRDS(file.path(inputs_dir, \"testmetadata.rds\")) all_factors <- get_tidy_factors(model = model,                                 metadata = metadata,                                 factor = \"all\",                                 sample_id_column = \"sample\") Factor3 <- get_tidy_factors(model = model,                             metadata = metadata,                             factor = \"Factor3\",                             sample_id_column = \"sample\")"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pb_dat2MOFA.html","id":null,"dir":"Reference","previous_headings":"","what":"Create MOFA-ready dataframe — pb_dat2MOFA","title":"Create MOFA-ready dataframe — pb_dat2MOFA","text":"Creates list SummarizedExperiments multi-view representation MOFA","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pb_dat2MOFA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create MOFA-ready dataframe — pb_dat2MOFA","text":"","code":"pb_dat2MOFA(pb_dat_list)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pb_dat2MOFA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create MOFA-ready dataframe — pb_dat2MOFA","text":"pb_dat_list List SummarizedExperiment generated MOFAcellulaR::filt_profiles()","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pb_dat2MOFA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create MOFA-ready dataframe — pb_dat2MOFA","text":"Data frame multiview representation","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pb_dat2MOFA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create MOFA-ready dataframe — pb_dat2MOFA","text":"function last data preparation step multicellular factor analysis. collects collection cell-type-specific SummarizedExperiments single data frame ready used MOFA. Features modified reflect cell type origin.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pb_dat2MOFA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create MOFA-ready dataframe — pb_dat2MOFA","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\")) pb_obj <- create_init_exp(counts = testpbcounts,  coldata = testcoldata)  ct_list <- filt_profiles(pb_dat = pb_obj,                          cts = c(\"Fib\",\"CM\"),                          ncells = 5,                          counts_col = \"cell_counts\",                          ct_col = \"cell_type\")  ct_list <- filt_gex_byexpr(pb_dat_list = ct_list,                            min.count = 5,                            min.prop = 0.25) #> Warning: All samples appear to belong to the same group. #> Warning: All samples appear to belong to the same group.  ct_list <- tmm_trns(pb_dat_list = ct_list,                     scale_factor = 1000000)  multiview_dat <- pb_dat2MOFA(pb_dat_list = ct_list)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_MOFA_hmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize MOFA multicellular model — plot_MOFA_hmap","title":"Visualize MOFA multicellular model — plot_MOFA_hmap","text":"Plots heatmap factor scores annotated sample's information factor's statistics","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_MOFA_hmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize MOFA multicellular model — plot_MOFA_hmap","text":"","code":"plot_MOFA_hmap(   model,   group = FALSE,   metadata,   sample_id_column = \"sample\",   sample_anns,   assoc_list = NULL )"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_MOFA_hmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize MOFA multicellular model — plot_MOFA_hmap","text":"model MOFA2 model. group Boolean flag TRUE/FALSE, specify grouped MOFA model provided. metadata data frame containing annotations samples included MOFA model. sample_id_column string character refers column metadata sample identifier located. sample_anns vector containing strings refer columns metadata used annotate samples assoc_list named list collecting results MOFAcellulaR::get_associations()","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_MOFA_hmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize MOFA multicellular model — plot_MOFA_hmap","text":"dataframe tidy format containing manifold scatter plot","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_MOFA_hmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize MOFA multicellular model — plot_MOFA_hmap","text":"function summarizes MOFA2 model plotting clustering factor scores across samples. Additionally, allows annotate sample categorical continous variables. Finally, factor, amount explained variance captured cell type shown. provided, summary association statistics sample variables can provided","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_MOFA_hmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize MOFA multicellular model — plot_MOFA_hmap","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") model <- MOFA2::load_model(file.path(inputs_dir, \"testmodel.hdf5\")) #> Warning: Factor(s) 1 are strongly correlated with the total number of expressed features for at least one of your omics. Such factors appear when there are differences in the total 'levels' between your samples, *sometimes* because of poor normalisation in the preprocessing steps. metadata <- readRDS(file.path(inputs_dir, \"testmetadata.rds\")) metadata$var <- stats::rnorm(nrow(metadata))  categorical_assoc <- get_associations(model = model,                                       metadata = metadata,                                       sample_id_column = \"sample\",                                       test_variable = \"patient_group\",                                       test_type = \"categorical\",                                       group = FALSE)  continuous_assoc <- get_associations(model = model,                                      metadata = metadata,                                      sample_id_column = \"sample\",                                      test_variable = \"var\",                                      test_type = \"continous\",                                      group = FALSE)   assoc_list = list(\"categorical\" = categorical_assoc, \"continous\" = continuous_assoc)  plot_MOFA_hmap(model = model,                group = FALSE,                metadata = metadata,                sample_id_column = \"sample\",                sample_anns = c(\"patient_group\", \"batch\", \"var\"),                assoc_list = assoc_list)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_sample_2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize sample variability in a 2D space — plot_sample_2D","title":"Visualize sample variability in a 2D space — plot_sample_2D","text":"Performs dimensionality reduction factor scores visualization sample-level variability","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_sample_2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize sample variability in a 2D space — plot_sample_2D","text":"","code":"plot_sample_2D(   model,   group = FALSE,   method = \"UMAP\",   metadata,   sample_id_column = \"sample\",   color_by,   ... )"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_sample_2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize sample variability in a 2D space — plot_sample_2D","text":"model MOFA2 model. group Boolean flag TRUE/FALSE, specify grouped MOFA model provided. method string specifying \"UMAP\" \"MDS\" performed metadata data frame containing annotations samples included MOFA model. sample_id_column string character refers column metadata sample identifier located. color_by string character refers column metadata covariate tested located. ... inherited parameters uwot::umap()","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_sample_2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize sample variability in a 2D space — plot_sample_2D","text":"dataframe tidy format containing manifold scatter plot","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_sample_2D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize sample variability in a 2D space — plot_sample_2D","text":"MOFA2 model performs multidimensional scaling (MDS) uniform manifold approximation projection (UMAP) factor scores. allows color samples based covariate available meta-data.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/plot_sample_2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize sample variability in a 2D space — plot_sample_2D","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") model <- MOFA2::load_model(file.path(inputs_dir, \"testmodel.hdf5\")) #> Warning: Factor(s) 1 are strongly correlated with the total number of expressed features for at least one of your omics. Such factors appear when there are differences in the total 'levels' between your samples, *sometimes* because of poor normalisation in the preprocessing steps. metadata <- readRDS(file.path(inputs_dir, \"testmetadata.rds\")) UMAP_embedding <- plot_sample_2D(model = model,                                  group = FALSE,                                  method = \"UMAP\",                                  metadata = metadata,                                  sample_id_column = \"sample\",                                  color_by = \"batch\")"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/tmm_trns.html","id":null,"dir":"Reference","previous_headings":"","what":"TMM normalization of single cell data sets — tmm_trns","title":"TMM normalization of single cell data sets — tmm_trns","text":"Performs list SummarizedExperiments, TMM normalization scaled factor specified user.","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/tmm_trns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TMM normalization of single cell data sets — tmm_trns","text":"","code":"tmm_trns(pb_dat_list, scale_factor = 1e+06)"},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/tmm_trns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TMM normalization of single cell data sets — tmm_trns","text":"pb_dat_list List SummarizedExperiment generated MOFAcellulaR::filt_profiles() scale_factor Numeric. Scaled counts multiplied factor log transformation","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/tmm_trns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TMM normalization of single cell data sets — tmm_trns","text":"named list SummarizedExperiments per cell type provided normalized log transformed data logcounts assay","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/tmm_trns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TMM normalization of single cell data sets — tmm_trns","text":"function estimates TMM normalization factors normalizes list gene count matrices, data additionally scaled using factor specified user log1p() transformed","code":""},{"path":"https://saezlab.github.io/MOFAcellulaR/reference/tmm_trns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TMM normalization of single cell data sets — tmm_trns","text":"","code":"inputs_dir <- base::system.file(\"extdata\", package = \"MOFAcellulaR\") load(file.path(inputs_dir, \"testpbcounts.rda\")) load(file.path(inputs_dir, \"testcoldata.rda\"))  pb_obj <- create_init_exp(counts = testpbcounts,                           coldata = testcoldata)  ct_list <- filt_profiles(pb_dat = pb_obj,                          cts = c(\"Fib\",\"CM\"),                          ncells = 5,                          counts_col = \"cell_counts\",                          ct_col = \"cell_type\")  ct_list <- filt_gex_byexpr(pb_dat_list = ct_list,                            min.count = 5,                            min.prop = 0.25) #> Warning: All samples appear to belong to the same group. #> Warning: All samples appear to belong to the same group.  ct_list <- tmm_trns(pb_dat_list = ct_list,                     scale_factor = 1000000)"}]
